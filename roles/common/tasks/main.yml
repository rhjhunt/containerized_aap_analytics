---
- name: Ensure remote user is non root
  ansible.builtin.assert:
    that:
      - ansible_user_uid != 0
    fail_msg: 'the remote user should be a non root user'

- name: Get service facts
  ansible.builtin.service_facts:
  become: true

- name: Install podman container tools
  ansible.builtin.package:
    name: '{{ podman_packages }}'
  become: true

- name: Create the containers config directory
  ansible.builtin.file:
    path: '{{ ansible_user_dir }}/.config/containers'
    state: directory
    mode: '0755'

- name: Configure podman runtime with crun
  ansible.builtin.template:
    src: containers.conf.j2
    dest: '{{ ansible_user_dir }}/.config/containers/containers.conf'
    mode: '0644'

- name: Configure podman
  ansible.builtin.include_tasks: podmansettings.yml
  when: >
    inventory_hostname in groups.get('grafana', []) or
    inventory_hostname in groups.get('prometheus', [])

- name: Enable lingering for ansible_user
  ansible.builtin.command: loginctl enable-linger {{ ansible_user_id }}
  args:
    creates: '/var/lib/systemd/linger/{{ ansible_user_id }}'

- name: Include registry tasks
  ansible.builtin.include_tasks: registry.yml
  when:
    - registry_auth | bool

- name: Include container image tasks
  ansible.builtin.include_tasks: images.yml

- name: Pull the container images
  containers.podman.podman_image:
    name: '{{ item }}'
    pull: true
    force: '{{ container_image_update }}'
    validate_certs: '{{ registry_tls_verify }}'
  environment:
    HTTP_PROXY: "{{ http_proxy | default('') }}"
    HTTPS_PROXY: "{{ https_proxy | default('') }}"
    NO_PROXY: "{{ no_proxy | default('') }}"
  loop: '{{ _images | unique }}'

- name: Set io.containers.autoupdate=registry label
  ansible.builtin.set_fact:
    _autoupdate_label:
      io.containers.autoupdate: registry
      io.containers.autoupdate.authfile: '{{ ansible_user_dir }}/.config/containers/auth.json'

- name: Configure firewalld
  ansible.builtin.include_tasks: firewalld.yml
...
